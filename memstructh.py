

def generate(fname, board_list):

	with open(fname, "w") as fo:
	
		# Start with headers guards, includes and defines
		final_output = (
			f"/* This file was generated by EclipseMemstructGen.py*/\n"
			f"\n"
			f"#ifndef MEMSTRUCT_H_\n"
			f"#define MEMSTRUCT_H_\n"
			f"\n"
			f"#ifndef E92_EXCLUDE_MAIN_MEMSTRUCT\n"
			f"\n"
			f"#include <stddef.h>\n"
			f"\n"
			f"#include \"can_cfg.h\"\n"
			f"#include \"can_sig.h\"\n"
			f"#include \"can_msg.h\"\n"
			f"#include \"can_frm.h\"\n"
			f"\n"
			f"#ifdef E92_USE_CUSTOM_MEMSTRUCT\n"
			f"       #include \"custom_memstruct.h\"\n"
			f"#endif\n"
			f"#include \"service_can_callbacks.h\"\n"
			f"\n"
			f"#define CANFRM_EXTENDED_ID  (1<<29)\n"
			f"#define CANFRM_RTR          (1<<30)\n"
			f"\n"
		)

		# Generate Callbacks
		board_callbacks = []
		for board in board_list:
			string = board.print_header()
			string += board.print_callback()
			board_callbacks.append(string)
		board_callbacks_str = '\n'.join(board_callbacks)
		final_output += (
			f"/*Callback definition*/\n"
			f"{board_callbacks_str}\n"
		)

		# Generate Board enum
		board_enums = []
		for board in board_list:
			board_enums.append(board.print_enum())
		board_enum_str = ',\n'.join(board_enums)
		final_output += (
			f"/*Board enum*/\n"
			f"enum{{\n"
			f"{board_enum_str}\n"
			f"}};\n"
		)

		# Generate Signal List
		signal_enums = []
		for board in board_list:
			string = board.print_header()
			string += board.print_signal_enum()
			signal_enums.append(string)
		signal_enum_str = ',\n'.join(signal_enums)
		final_output += (
			f"/*Signal enum*/\n"
			f"enum{{\n"
			f"{signal_enum_str},\n"
			f"\n"
			f"#ifdef E92_USE_CUSTOM_MEMSTRUCT\n"
			f"        S_CUSTOM_SIGNALS_ID\n"
			f"#endif\n"
			f"}};\n"
		)

		# Generate Message List
		message_enums = []
		for board in board_list:
			string = board.print_header()
			string += board.print_message_enum()
			message_enums.append(string)
		message_enum_str = ',\n'.join(message_enums)
		final_output += (
			f"/*Message enum*/\n"
			f"enum{{\n"
			f"{message_enum_str}\n"
			f"}};\n"
			f"\n"
		)
		
		# Define M_max
		cnt = 0
		for board in board_list:
			cnt += len(board.messages)
		final_output += (
			f"#define M_MAX                 {cnt}\n"
			f"\n"
			f"#endif /*E92_EXCLUDE_MAIN_MEMSTRUCT*/\n"
			f"#endif\n"
		)
		
		# Writing to file
		fo.write(final_output)
